// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/patient.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/push-notification-consumer/pkg/datastore"
)

// MockPatientDataStore is a mock of PatientDataStore interface.
type MockPatientDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockPatientDataStoreMockRecorder
}

// MockPatientDataStoreMockRecorder is the mock recorder for MockPatientDataStore.
type MockPatientDataStoreMockRecorder struct {
	mock *MockPatientDataStore
}

// NewMockPatientDataStore creates a new mock instance.
func NewMockPatientDataStore(ctrl *gomock.Controller) *MockPatientDataStore {
	mock := &MockPatientDataStore{ctrl: ctrl}
	mock.recorder = &MockPatientDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientDataStore) EXPECT() *MockPatientDataStoreMockRecorder {
	return m.recorder
}

// FindByIDOrRefID mocks base method.
func (m *MockPatientDataStore) FindByIDOrRefID(cred string) (*datastore.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDOrRefID", cred)
	ret0, _ := ret[0].(*datastore.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDOrRefID indicates an expected call of FindByIDOrRefID.
func (mr *MockPatientDataStoreMockRecorder) FindByIDOrRefID(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDOrRefID", reflect.TypeOf((*MockPatientDataStore)(nil).FindByIDOrRefID), cred)
}
